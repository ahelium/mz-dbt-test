services:
  materialized:
    image: materialize/materialized:v0.26.3
    ports:
      - 6875:6875
    healthcheck:
      { test: curl -f localhost:6875, interval: 1s, start_period: 30s }
  postgres:
    image: postgres:14.2-alpine
    init: true
    ports:
      - 5432:5432
    restart: always
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    healthcheck:
      {
        test: pg_isready -q -d postgres -U postgres,
        interval: 5s,
        timeout: 60s,
        start_period: 10s,
      }
    command: -c wal_level=logical
    volumes:
      - ./postgres/pg_tables.sql:/docker-entrypoint-initdb.d/init.sql
  redpanda:
    image: docker.vectorized.io/vectorized/redpanda:v21.11.2
    command:
      - redpanda start
      - --overprovisioned
      - --smp 1
      - --memory 1G
      - --reserve-memory 0M
      - --node-id 0
      - --check=false
      - --kafka-addr 0.0.0.0:9092
      - --advertise-kafka-addr redpanda:9092
      - --pandaproxy-addr 0.0.0.0:8082
      - --advertise-pandaproxy-addr redpanda:8082
      - --set redpanda.enable_transactions=true
      - --set redpanda.enable_idempotence=true
    ports:
      - 9092:9092
      - 8081:8081
      - 8082:8082
    healthcheck:
      {
        test: curl -f localhost:9644/v1/status/ready,
        interval: 1s,
        start_period: 30s,
      }
  loadgen:
    build: ./loadgen
    init: true
    environment:
      KAFKA_ADDR: redpanda:9092
    depends_on:
      postgres: { condition: service_healthy }
      redpanda: { condition: service_healthy }
  dbt:
    build: ./dbt/project
    container_name: dbt
    init: true
    entrypoint: ["/bin/bash", "entrypoint.sh"]
    working_dir: /usr/app/dbt/
    ports:
      - 8000:8080
    volumes:
      - ./dbt/project/profiles.yml:/root/.dbt/profiles.yml
      - ./dbt/project/:/usr/app/dbt
    stdin_open: true
    tty: true
    depends_on:
      materialized: {condition: service_healthy}
  exporter:
    build: ./exporter
    container_name: exporter
    depends_on:
      materialized: { condition: service_healthy }
    ports:
      - 80:80
  prometheus:
    image: prom/prometheus:v2.30.3
    ports:
      - 9090:9090
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command: --web.enable-lifecycle  --config.file=/etc/prometheus/prometheus.yml
  grafana:
    image: grafana/grafana:9.0.2
    ports:
      - 3000:3000
    restart: unless-stopped
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning/
      - grafana-data:/var/lib/grafana
    container_name: grafana
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_DISABLE_LOGIN_FORM: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
      GF_UNIFIED_ALERTINT_ENABLED: "true"
      GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: "/etc/grafana/provisioning/dashboards/etl_pipeline.json"

volumes:
  prometheus-data:
  grafana-data:
